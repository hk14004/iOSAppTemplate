// swiftlint:disable:this file_name
// swiftlint:disable all
// swift-format-ignore-file
// swiftformat:disable all
// Generated using tuist â€” https://github.com/tuist/tuist

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set bundleToken %}{{param.name}}Resources{% endset %}
import Foundation
import DevToolsLocalization

// swiftlint:disable superfluous_disable_command file_length implicit_return

// MARK: - Strings

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
{% for type in types %}
{% if type == "String" %}
_ p{{forloop.counter}}: Any
{% else %}
_ p{{forloop.counter}}: {{type}}
{% endif %}
{{ ", " if not forloop.last }}
{% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
{% for type in types %}
{% if type == "String" %}
String(describing: p{{forloop.counter}})
{% elif type == "UnsafeRawPointer" %}
Int(bitPattern: p{{forloop.counter}})
{% else %}
p{{forloop.counter}}
{% endif %}
{{ ", " if not forloop.last }}
{% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item %}
{% for string in item.strings %}
{% if not param.noComments %}
/// {{string.translation}}
{% endif %}

{% set varName %}{{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
{% if string.types %}
{{accessModifier}} static func {{varName}}({% call parametersBlock string.types %}) -> String {
    return {{enumName}}.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
}
{{accessModifier}} static var {{varName}}Key: String { "{{string.key}}" }
{% elif param.lookupFunction %}
{{accessModifier}} static var {{varName}}: String { return {{enumName}}.tr("{{table}}", "{{string.key}}") }
{{accessModifier}} static var {{varName}}Key: String { "{{string.key}}" }
{% else %}
{{accessModifier}} static var {{varName}}: String { {{enumName}}.tr("{{table}}", "{{string.key}}") }
{{accessModifier}} static var {{varName}}Key: String { "{{string.key}}" }
{% endif %}

{% endfor %}
{% for child in item.children %}

{{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}: Sendable {
{% filter indent:2 %}{% call recursiveBlock table child %}{% endfilter %}
}
{% endfor %}
{% endmacro %}
// swiftlint:disable explicit_type_interface function_parameter_count identifier_name line_length
// swiftlint:disable nesting type_body_length type_name
{% set enumName %}{{param.name}}{% endset %}
{{accessModifier}} enum {{enumName}}: Sendable {
{% if tables.count > 1 or param.forceFileNameEnum %}
{% for table in tables %}
{{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
{% filter indent:2 %}{% call recursiveBlock table.name table.levels %}{% endfilter %}
}
{% endfor %}
{% else %}
{% call recursiveBlock tables.first.name tables.first.levels %}
{% endif %}
}
// swiftlint:enable explicit_type_interface function_parameter_count identifier_name line_length
// swiftlint:enable nesting type_body_length type_name

// MARK: - Implementation Details

extension {{enumName}} {
    private static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {
        String(format: key.runtimeLocalized(), locale: Locale.current, arguments: args)
    }
}
{% if not param.lookupFunction %}

// swiftlint:disable convenience_type
{% endif %}
{% else %}
// No string found
{% endif %}
// swiftlint:enable all
// swiftformat:enable all
